#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Default system properties included when running spark-submit.
# This is useful for setting default environmental settings.

# Example:
# spark.master                     spark://master:7077
# enabling spark.eventLog:
# SparkContext launches a web UI, by default on port 4040(1,2,3...), that displays useful information
# about the application - ONLY WHILE IT IS RUNNING.  This includes:
#   A list of scheduler stages and tasks
#   A summary of RDD sizes and memory usage
#   Environmental information.
#   Information about the running executors
# Alternatives:
#   spark-shell --conf spark.eventLog.enabled=true --conf spark.eventLog.dir=<dir>
#   scala code:
#         sparkConf.set("spark.cores.max", "4")
#         sparkConf.set("spark.serializer", classOf[KryoSerializer].getName)
#         sparkConf.set("spark.sql.tungsten.enabled", "true")
#         sparkConf.set("spark.eventLog.enabled", "true")
#         sparkConf.set("spark.app.id", "MyAppIWantToFind")
#         sparkConf.set("spark.io.compression.codec", "snappy")
#         sparkConf.set("spark.rdd.compress", "false")
#         sparkConf.set("spark.suffle.compress", "true")
#
#   Make sure you have Tungsten on, the KryoSerializer, eventLog enabled and use Logging.
#     Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
#     Logger.getLogger("org.apache.spark.storage.BlockManager").setLevel(Level.ERROR)
#     val log = Logger.getLogger("com.mycompany.myapp")
#     log.info("Started Logs Analysis")
#
# spark.eventLog.enabled           true
# spark.eventLog.dir               hdfs://namenode:8021/directory
# spark.serializer                 org.apache.spark.serializer.KryoSerializer
# spark.driver.memory              5g
# spark.executor.extraJavaOptions  -XX:+PrintGCDetails -Dkey=value -Dnumbers="one two three"
spark.ui.reverseProxy              true
spark.ui.reverseProxyUrl           /
