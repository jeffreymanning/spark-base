kind: Template
apiVersion: v1
template: spark-pv-cluster
metadata:
  name: spark-pv-cluster
labels:
  app: spark-pv-cluster
objects:

# setup the Persistent Volumes that will be claimed by analytics
# note path is the name of the volume.
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}-scratch
    labels:
      name: ${MASTER_NAME}
      cluster: ${CLUSTER_NAME}
      gluster-cluster: glusterfs-cluster
  spec:
    capacity:
      storage: 2Gi
    accessModes:
      - ReadWriteMany
    glusterfs:
      endpoints: glusterfs-cluster
      path: scratch
      readOnly: false
    persistentVolumeReclaimPolicy: Retain

- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}-logs
    labels:
      name: ${MASTER_NAME}
      cluster: ${CLUSTER_NAME}
      gluster-cluster: glusterfs-cluster
  spec:
    capacity:
      storage: 5Gi
    accessModes:
      - ReadWriteMany
    glusterfs:
      endpoints: glusterfs-cluster
      path: logs
      readOnly: false
    persistentVolumeReclaimPolicy: Retain

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}-scratch
    labels:
      name: ${MASTER_NAME}
      cluster: ${CLUSTER_NAME}
      gluster-cluster: glusterfs-cluster
  spec:
    accessModes:
    - ReadWriteMany
    resources:
       requests:
         storage: 2Gi

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}-logs
    labels:
      name: ${MASTER_NAME}
      cluster: ${CLUSTER_NAME}
      gluster-cluster: glusterfs-cluster
  spec:
    accessModes:
    - ReadWriteMany
    resources:
       requests:
         storage: 5Gi

- kind: Service
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}
    labels:
      name: ${MASTER_NAME}
  spec:
    ports:
      - protocol: TCP
        port: 7077
        targetPort: 7077
    selector:
      name: ${MASTER_NAME}

- kind: Service
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}-webui
    labels:
      name: ${MASTER_NAME}
  spec:
    ports:
      - protocol: TCP
        port: 8080
        targetPort: 8080
    selector:
      name: ${MASTER_NAME}

- kind: Service
  apiVersion: v1
  metadata:
    name: ${ZEPPELIN_NAME}
    labels:
      name: ${MASTER_NAME}
  spec:
    ports:
      - port: 80
        targetPort: 8080
    selector:
      name: ${ZEPPELIN_NAME}
    type: LoadBalancer

- kind: Service
  apiVersion: v1
  metadata:
    name: ${ZEPPELIN_NAME}-spark-ui
    labels:
      name: ${MASTER_NAME}
  spec:
    ports:
      - port: 4040
        targetPort: 4040
    selector:
      name: ${ZEPPELIN_NAME}
    type: LoadBalancer

# Unsecure Route...  Need to research secure routes
#- kind: Route
#  apiVersion: v1
#  metadata:
#    name: ${ZEPPELIN_NAME}
#    labels:
#      name: ${MASTER_NAME}
#  spec:
#    to:
#      kind: Service
#      name: ${ZEPPELIN_NAME}
#    tls:
#      termination: edge

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${MASTER_NAME}
    labels:
      cluster: ${CLUSTER_NAME}
      type: master
  spec:
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
    replicas: 1
    selector:
      name: ${MASTER_NAME}
    template:
      metadata:
        labels:
          name: ${MASTER_NAME}
      spec:
        containers:
          - name: ${MASTER_NAME}
            image: ${SPARK_IMAGE}
            imagePullPolicy: "Always"
            env:
              - name: SPARK_MASTER_PORT
                value: "7077"
              - name: SPARK_MASTER_WEBUI_PORT
                value: "8080"
            ports:
              - containerPort: 7077
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
            volumeMounts:
              - mountPath: /mnt/data
                name: glusterfsdata
              - mountPath: /mnt/logs
                name: glusterfslogs
        volumes:
          - name: glusterfsdata
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-scratch
          - name: glusterfslogs
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-logs

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${WORKER_NAME}
    labels:
      cluster: ${CLUSTER_NAME}
      type: worker
  spec:
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
    replicas: ${WORKER_RELICAS}
    selector:
      name: ${WORKER_NAME}
    template:
      metadata:
        labels:
          name: ${WORKER_NAME}
      spec:
        containers:
          - name: ${WORKER_NAME}
            image: ${SPARK_IMAGE}
            imagePullPolicy: "Always"
            env:
              - name: SPARK_MASTER_ADDRESS
                value: spark://${MASTER_NAME}:7077
              - name: SPARK_MASTER_UI_ADDRESS
                value: http://${MASTER_NAME}-webui:8080
            volumeMounts:
              - mountPath: /mnt/data
                name: glusterfsdata
              - mountPath: /mnt/logs
                name: glusterfslogs
        volumes:
          - name: glusterfsdata
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-scratch
          - name: glusterfslogs
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-logs

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${ZEPPELIN_NAME}
    labels:
      cluster: ${CLUSTER_NAME}
      type: api
  spec:
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
    replicas: 1
    selector:
      name: ${ZEPPELIN_NAME}
    template:
      metadata:
        labels:
          name: ${ZEPPELIN_NAME}
      spec:
        containers:
          - name: ${ZEPPELIN_NAME}
            image: ${ZEPPELIN_IMAGE}
            imagePullPolicy: "Always"
            ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 4040
                protocol: TCP
            env:
              - name: MASTER
                value: spark://${MASTER_NAME}:7077
              - name: SPARK_MASTER_ADDRESS
                value: spark://${MASTER_NAME}:7077
            volumeMounts:
              - mountPath: /mnt/data
                name: glusterfsdata
              - mountPath: /mnt/logs
                name: glusterfslogs
        volumes:
          - name: glusterfsdata
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-scratch
          - name: glusterfslogs
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-logs
# R-Studio, if we define a  mount point, will make this the R_USER_LIBS.
# will then survive restarts (nop
- kind: Service
  apiVersion: v1
  metadata:
    name: ${RSTUDIO_NAME}
    labels:
      name: ${RSTUDIO_NAME}
      cluster: ${CLUSTER_NAME}
      type: api
  spec:
    ports:
      - protocol: TCP
        port: 8787
        targetPort: 8787
    selector:
      name: ${RSTUDIO_NAME}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${RSTUDIO_NAME}
  spec:
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
    replicas: 1
    selector:
      name: ${RSTUDIO_NAME}
    template:
      metadata:
        labels:
          name: ${RSTUDIO_NAME}
      spec:
        containers:
          - name: ${RSTUDIO_NAME}
            image: ${RSTUDIO_IMAGE}
            env:
              - name: SPARK_MASTER_ADDRESS
                value: spark://${MASTER_NAME}:7077
              - name: R_STUDIO_LIB_SITE
                value: /mnt/data
              - name: CRAN_REPO
                value: https://cran.rstudio.com/
              - name: BIO_REPO
                value: https://bioconductor.org/
            ports:
              - containerPort: 8787
                protocol: TCP
            volumeMounts:
              - mountPath: /mnt/data
                name: glusterfsdata
              - mountPath: /mnt/logs
                name: glusterfslogs
        volumes:
          - name: glusterfsdata
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-scratch
          - name: glusterfslogs
            persistentVolumeClaim:
              claimName: ${MASTER_NAME}-logs

parameters:
- name: SPARK_IMAGE
  description: Name of the Spark master/worker image
  value: docker.io/jeffreymanning/spark-base:latest
- name: CLUSTER_NAME
  description: name of cluster - applicable to spark infrastructure
  generate: expression
  from: "cluster-[a-z0-9]{4}"
  required: true
- name: MASTER_NAME
  description: master name used as a service name and a selector
  generate: expression
  from: "spark-master-[a-z0-9]{4}"
  required: true
- name: WORKER_NAME
  description: worker name used as a selector
  generate: expression
  from: "spark-worker-[a-z0-9]{4}"
  required: true
- name: WORKER_RELICAS
  description: worker replica count
  value: "3"
  required: true
# zeppelin parameters
- name: ZEPPELIN_NAME
  description: zeppelin name used for selector - combines with master name
  generate: expression
  from: "zeppelin-[a-z0-9]{4}"
  required: true
- name: ZEPPELIN_IMAGE
  description: Name of the Zeppelin interface
  value: docker.io/jeffreymanning/zeppelin:latest
###  R-studio installation
- name: RSTUDIO_IMAGE
  description: Name of the r-studio api image
  value: docker.io/jeffreymanning/r-studio:latest
- name: RSTUDIO_NAME
  description: rstudio name used as a selector
  generate: expression
  from: "rstudio-server-[a-z0-9]{4}"
  required: true